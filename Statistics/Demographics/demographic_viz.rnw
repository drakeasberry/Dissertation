% Visualization code

<<global_opts_demo, echo=TRUE, cache=FALSE>>=
library(knitr)
library(here)

knitr::opts_chunk$set(
  echo = FALSE
)
here::here()
set_parent(here('Asberry_Dissertation/Dissertation.Rnw'))
@


<<gen_demo_lib, echo = FALSE>>=
# Load Libraries
library(tidyverse)
library(psych)
library(lattice)

source('../../Scripts_Dissertation/diss_dataviz_script.R')
source('../../Scripts_Dissertation/analysis_functions.R')
@

<<test1, echo=TRUE, results='asis'>>=
x <- 2 + 2
@

<<gen_eligible_data, echo = FALSE>>=
# Read csv file for all participants passed to experimental analysis
eligible_part <- read_csv('analyze_data/output/all_participant_demo.csv')

# Subset for Izura LexTALE-ESP calculations
eligible_izura_score <- eligible_part %>% 
  select('partNum', 'group', 'izura_score', 'age', 'span_acq_age')

# Counts by participant group
eligible_izura_score %>% 
  group_by(group) %>% 
  count()

# All participants Lextale-Esp distribution plots
# produced with lattice package
density_eligible_pooled <- densityplot(~izura_score, 
            data = eligible_izura_score, 
            main = 'Eligible Participants')
density_eligible_pooled

# produced by function written for dissertation consistency
density_eligible_grouped <- eligible_izura_score %>% 
      mutate(group = ifelse(group == 'English' | group == 'L2 Learner', 
                            'L1 English', "L1 Spanish")) %>% 
  density(., 'izura_score', 'group') +
  labs(title = 'Eligible Participants', 
       x = 'Izura Score', 
       y = 'Density')
density_eligible_grouped

# produced with lattice package
hist_eligible_pooled <- histogram(~izura_score, 
          data = eligible_izura_score, 
          main = 'Eligible Participants') 
hist_eligible_pooled

# produced by histo function written for dissertation consistency
lang_eligible_izura_score <- eligible_izura_score %>%
  mutate(group = ifelse(group == 'English' | group == 'L2 Learner', 
                      'L1 English', "L1 Spanish"))

hist_eligible_grouped <- lang_eligible_izura_score %>% 
  histo(., 'izura_score', 'group') +
  labs(title = 'Eligible Participants', 
       x = 'Izura Score', 
       y = 'Frequency')
hist_eligible_grouped

# Descriptives
lang_stat_compare <- lang_eligible_izura_score %>% 
  group_by(group) %>% 
  summarise(Mean = mean(izura_score),
            SD = sd(izura_score)) %>% 
  column_to_rownames(., var = "group")

# Create subgroup dataframes
eligible_esp <- lang_eligible_izura_score %>% 
  subset(., group == 'L1 Spanish')
eligible_eng <- lang_eligible_izura_score %>% 
  subset(., group == 'L1 English')

# One sample t-test for CIs, Means
t_eligible_esp <- t.test(eligible_esp$izura_score)
t_eligible_esp
t_eligible_eng <- t.test(eligible_eng$izura_score)
t_eligible_eng

# Two sample t-test comparing groups by native language
lang_compare <- t.test(lang_eligible_izura_score$izura_score ~ lang_eligible_izura_score$group)
lang_compare

# produced by histo function written for dissertation consistency
eligible_eng_grouped <- eligible_izura_score %>% 
  subset(., group == 'English' | group == 'L2 Learner') %>%
  mutate(group = ifelse(group == 'English', "In-person", "Online"),
         len_acq = age - span_acq_age)

eng_stat_compare <- eligible_eng_grouped %>% 
  group_by(group) %>% 
  summarise(Mean = mean(izura_score),
            SD = sd(izura_score),
            Mean_age = mean(age, na.rm = TRUE),
            SD_age = sd(age, na.rm = TRUE),
            Mean_esp_age = mean(span_acq_age, na.rm = TRUE),
            SD_esp_age = sd(span_acq_age, na.rm = TRUE),
            Mean_len_acq = mean(len_acq, na.rm = TRUE),
            SD_len_acq = sd(len_acq, na.rm = TRUE)) %>% 
  column_to_rownames(., var = "group")

eng_online <- eligible_eng_grouped %>% 
  subset(., group == 'Online')
eng_inperson <- eligible_eng_grouped %>% 
  subset(., group != 'Online')

t_eng_online <- t.test(eng_online$izura_score)
t_eng_inperson <- t.test(eng_inperson$izura_score)

eng_compare <- t.test(eligible_eng_grouped$izura_score ~ eligible_eng_grouped$group)

# Explore age as variable for vocabulary size difference
t_eng_online_age <- t.test(eng_online$age)
t_eng_online_age
t_eng_inperson_age <- t.test(eng_inperson$age)
t_eng_inperson_age
eng_age_compare <- t.test(eligible_eng_grouped$age ~ eligible_eng_grouped$group)
eng_age_compare

# Explore age of acquisition as variable for vocabulary size difference
t_eng_online_esp_age <- t.test(eng_online$span_acq_age)
t_eng_online_esp_age
t_eng_inperson_esp_age <- t.test(eng_inperson$span_acq_age)
t_eng_inperson_esp_age
eng_esp_age_compare <- t.test(eligible_eng_grouped$span_acq_age ~ eligible_eng_grouped$group)
eng_esp_age_compare

# Explore length of acquisition as variable for vocabulary size difference
t_eng_online_len_acq <- t.test(eng_online$len_acq)
t_eng_online_len_acq
t_eng_inperson_len_acq <- t.test(eng_inperson$len_acq)
t_eng_inperson_len_acq
eng_len_acq_compare <- t.test(eligible_eng_grouped$len_acq ~ eligible_eng_grouped$group)
eng_len_acq_compare

hist_eligible_eng_grouped <- eligible_eng_grouped %>%   
  histo(., 'izura_score', 'group') +
  labs(title = 'Eligible LS Participants by Recruitment Type', 
       x = 'Izura Score', 
       y = 'Frequency')
hist_eligible_eng_grouped

eligible_esp_grouped <- eligible_izura_score %>% 
  subset(., group == 'Spanish' | group == 'Monolingual Spanish') %>%
  mutate(group = ifelse(group == 'Spanish', "In-person", "Online"))

esp_stat_compare <- eligible_esp_grouped %>% 
  group_by(group) %>% 
  summarise(Mean = mean(izura_score),
            SD = sd(izura_score)) %>% 
  column_to_rownames(., var = "group")

eligible_esp_grouped %>% 
  group_by(group) %>% 
  summarise(Mean = mean(izura_score),
            SD = sd(izura_score),
            N = n(),
            MOE_95 = qnorm(0.975)*SD/sqrt(N-1),
            LL = Mean - MOE_95,
            UL = Mean + MOE_95) %>% 
  view()

esp_online <- eligible_esp_grouped %>% 
  subset(., group == 'Online')
esp_inperson <- eligible_esp_grouped %>% 
  subset(., group != 'Online')

t_esp_online <- t.test(esp_online$izura_score)
t_esp_inperson <- t.test(esp_inperson$izura_score)

esp_stat_compare["In-person", "Mean"]
esp_stat_compare["In-person", "SD"]
esp_stat_compare["Online", "Mean"]
esp_stat_compare["Online", "SD"]

# Compare group means on izura score for Spanish vocabulary size
esp_compare <- t.test(eligible_esp_grouped$izura_score ~ eligible_esp_grouped$group)
esp_compare
# Access t-statistic
esp_compare[["statistic"]]
esp_compare$statistic
# Access df
esp_compare[["parameter"]]
esp_compare$parameter
# Access P-value
esp_compare[["p.value"]]
esp_compare$p.value
# Access CIs
esp_compare[["conf.int"]][1]
esp_compare$conf.int[1]
esp_compare[["conf.int"]][2]
esp_compare$conf.int[2]
# Access Percent CI
#attr(esp_compare["conf.int"],esp_compare["conf.level"])
#esp_compare$conf.int[[attr("conf.int","conf.level")]]
#esp_compare$conf.int
# Access Means
esp_compare[["estimate"]][1]
esp_compare$estimate[1]
esp_compare[["estimate"]][2]
esp_compare$estimate[2]

hist_eligible_esp_grouped <- eligible_esp_grouped %>%   
  histo(., 'izura_score', 'group') +
  labs(title = 'Eligible Native Spanish Participants by Recruitment Type', 
       x = 'Izura Score', 
       y = 'Frequency')
hist_eligible_esp_grouped

# All participants Lextale-Esp descriptive statistics 
eligible_lexesp <- describe(eligible_izura_score$izura_score) %>% 
  mutate(vars = "Eligible participants") %>% 
  rename(group = vars)

# Get counts of participants (counts functions used for dissertation consistency)
# grouped by gender and group (experiment here)
counts_byGroup_Gender <- counts(eligible_part, grouping_col = c("group", "gender"))
# grouped by gender only
counts_byGender <- counts(eligible_part, grouping_col = "gender")
# grouped by group only
counts_byGroup <- counts(eligible_part, grouping_col = c("group"))

# Get summary stats for reporting (my_stats function used for dissertation consistency)
# Columns that I want summary stats for
stat_col <- c("age", "span_acq_age", "eng_acq_age")

# Stats I want to run
summary_stats <- quote(list(Mean = mean, Min = min, Max = max, SD = sd))

# grouped by gender and group (experiment here)
eligible_grp_den_desc <- my_stats(eligible_part, 
              grp_col = c("group", "gender"), 
              sum_col = stat_col,
              stats = summary_stats) 

eligible_grp_den_desc %>% 
  mutate(., index = paste(group, gender, sep = "_")) %>% 
  column_to_rownames(., var = 'index') %>% 
  view()
# grouped by gender only
eligible_gen_desc <- my_stats(eligible_part, 
              grp_col = c("gender"), 
              sum_col = stat_col,
              stats = summary_stats) %>% 
  column_to_rownames(., var = 'gender')

# grouped by group only
eligible_grp_desc <- my_stats(eligible_part, 
              grp_col = c("group"), 
              sum_col = stat_col,
              stats = summary_stats) %>% 
  column_to_rownames(., var = 'group')

# no group 
eligible_desc <- my_stats(eligible_part, 
              grp_col = NULL, 
              sum_col = stat_col,
              stats = summary_stats)
@


<<gen_analyzed_data, echo = FALSE>>=
# Remove participants who did not successfully/accurately complete study
# Load in datasets
intuition_part <- read_csv('analyze_data/from_exp_analysis/67_eligible_intuition_part.csv')
lab_seg_part <- read_csv('analyze_data/from_exp_analysis/45_eligible_lab_part.csv')
online_part_mono <- read_csv('analyze_data/from_exp_analysis/44_eligible_online_mono_part.csv')
online_part_learner <- read_csv('analyze_data/from_exp_analysis/55_eligible_online_learners_part.csv')

# merge into one vector
kept_part <- rbind(intuition_part, lab_seg_part, online_part_mono, online_part_learner) %>% 
  unique()

# remove participants eliminated from analysis in all experiments
analyzed_part <- eligible_part %>% 
  subset(., .$partNum %in% kept_part$partNum)

# Subset for Izura LexTALE-ESP calculations
analyzed_izura_score <- analyzed_part %>% 
  select('partNum', 'group', 'izura_score')

# Counts by participant group
analyzed_izura_score %>% 
  group_by(group) %>% 
  count()

# All participants Lextale-Esp distribution plots
# produced with lattice package
density_anaylzed_pooled <- densityplot(~izura_score, 
            data = analyzed_izura_score, 
            main = 'All Participants') 
density_anaylzed_pooled

# produced by function written for dissertation consistency
density_analyzed_grouped <- analyzed_izura_score %>% 
      mutate(group = ifelse(group == 'English' | group == 'L2 Learner', 
                            'L1 English', "L1 Spanish")) %>% 
  density(., 'izura_score', 'group') +
  labs(title = 'All Participants', 
       x = 'Izura Score', 
       y = 'Density')
density_analyzed_grouped

# produced with lattice package
hist_anaylzed_pooled <- histogram(~izura_score, 
          data = analyzed_izura_score, 
          main = 'Spanish Vocabulary Size by Native Language') 
hist_anaylzed_pooled

# produced by histo function written for dissertation consistency
hist_eligible_grouped <- analyzed_izura_score %>% 
      mutate(group = ifelse(group == 'English' | group == 'L2 Learner', 
                            'L1 English', "L1 Spanish")) %>% 
  histo(., 'izura_score', 'group') +
  labs(title = 'Spanish Vocabulary Size by Native Language', 
       x = 'Izura Score', 
       y = 'Frequency')
hist_eligible_grouped

# All participants Lextale-Esp descriptive statistics 
analyzed_lexesp <- describe(analyzed_izura_score$izura_score) %>% 
  mutate(vars = "All participants") %>% 
  rename(group = vars)

# Get counts of participants (counts functions used for dissertation consistency)
# grouped by gender and group (experiment here)
analyzed_counts_byGroup <- counts(analyzed_part, grouping_col = c("group", "gender"))
# grouped by gender only
analyzed_counts_byGender <- counts(analyzed_part, grouping_col = "gender")

# Get summary stats for reporting (my_stats function used for dissertation consistency)
# grouped by gender and group (experiment here)
analyzed_grp_den_desc <- my_stats(analyzed_part, 
              grp_col = c("group", "gender"), 
              sum_col = stat_col,
              stats = summary_stats)

# grouped by gender only
analyzed_gen_desc <- my_stats(analyzed_part, 
              grp_col = c("gender"), 
              sum_col = stat_col,
              stats = summary_stats)

# grouped by group only
analyzed_grp_desc <- my_stats(analyzed_part, 
              grp_col = c("group"), 
              sum_col = stat_col,
              stats = summary_stats)

# no group 
analyzed_desc <- my_stats(analyzed_part, 
              grp_col = NULL, 
              sum_col = stat_col,
              stats = summary_stats)
@


<<testing, echo=FALSE>>=
# L1 Spanish participants Lextale-Esp distribution plots
# Create subset Spanish natives
l1_spanish <- analyzed_izura_score %>% 
  subset(., group == "Spanish" | group == "Monolingual Spanish")

densityplot(~izura_score, 
            data = l1_spanish, 
            main = 'Density plot of L1 Spanish participants') 
histogram(~izura_score, 
          data = l1_spanish, 
          main = 'L1 Spanish participants collected')

# L1 Spanish participants Lextale-Esp descriptive statistics 
l1 <- describe(l1_spanish$izura_score) %>% 
  mutate(vars = "Native Spanish") %>% 
  rename(group = vars)


# L1 Spanish bilingual participants Lextale-Esp distribution plots
# Create subset Spanish natives bilingual
l1_bi_spanish <- analyzed_izura_score %>% 
  subset(., group == "Spanish")

densityplot(~izura_score, 
            data = l1_bi_spanish, 
            main = 'Density plot of L1 Spanish bilingual participants') 
histogram(~izura_score, 
          data = l1_bi_spanish, 
          main = 'L1 Spanish bilingual participants collected')

# L1 Spanish bilingual participants Lextale-Esp descriptive statistics 
l1_bi <- describe(l1_bi_spanish$izura_score) %>% 
  mutate(vars = "Native Spanish Bilingual") %>% 
  rename(group = vars)


# L1 Spanish monolingual participants Lextale-Esp distribution plots
# Create subset Spanish natives monolingual
l1_mono_spanish <- analyzed_izura_score %>% 
  subset(., group == "Monolingual Spanish")

densityplot(~izura_score, 
            data = l1_mono_spanish, 
            main = 'Density plot of L1 Spanish monolingual participants') 
histogram(~izura_score, 
          data = l1_mono_spanish, 
          main = 'L1 Spanish monolingual participants collected')

# L1 Spanish monolingual participants Lextale-Esp descriptive statistics 
l1_mono <- describe(l1_mono_spanish$izura_score) %>% 
  mutate(vars = "Native Spanish Monolingual") %>% 
  rename(group = vars)


# L2 Spanish participants Lextale-Esp distribution plots
# Create subset English natives
l2_spanish <- analyzed_izura_score %>% 
  subset(., group == "English" | group == "L2 Learner")

densityplot(~izura_score, 
            data = l2_spanish, 
            main = 'Density plot of L2 Spanish participants') 
histogram(~izura_score, 
          data = l2_spanish, 
          main = 'L2 Spanish participants collected')

# L2 Spanish participants Lextale-Esp descriptive statistics 
l2 <- describe(l2_spanish$izura_score) %>% 
  mutate(vars = "Native English") %>% 
  rename(group = vars)


# Create table of group statistics
#table_descriptives <- do.call('rbind', list(all, l1, l1_mono, l1_bi, l2))

# Remove unnecessary objects
#rm(all, l1, l1_mono, l1_bi, l2)
@
